// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"fmt"
	"os"
	"slices"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"postgresql","activeProvider":"postgresql","url":{"fromEnvVar":"POSTGRES_URL","value":""},"config":null}]`

const schema = `datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model Interview {
  id          String   @id @default(uuid())
  companyName String
  time        DateTime
  notes       String?
  vacancyUrl  String?  @map("vacancy_url")
  meetingUrl  String?  @map("meeting_url")
  isCompleted Boolean  @default(false) @map("is_completed")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
`
const schemaDatasourceURL = ""
const schemaEnvVarName = "POSTGRES_URL"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set " + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.Interview = interviewActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// Interview provides access to CRUD methods.
	Interview interviewActions
}

// --- template enums.gotpl ---

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelReadUncommitted TransactionIsolationLevel = "ReadUncommitted"
	TransactionIsolationLevelReadCommitted   TransactionIsolationLevel = "ReadCommitted"
	TransactionIsolationLevelRepeatableRead  TransactionIsolationLevel = "RepeatableRead"
	TransactionIsolationLevelSerializable    TransactionIsolationLevel = "Serializable"
)

type InterviewScalarFieldEnum string

const (
	InterviewScalarFieldEnumID          InterviewScalarFieldEnum = "id"
	InterviewScalarFieldEnumCompanyName InterviewScalarFieldEnum = "companyName"
	InterviewScalarFieldEnumTime        InterviewScalarFieldEnum = "time"
	InterviewScalarFieldEnumNotes       InterviewScalarFieldEnum = "notes"
	InterviewScalarFieldEnumVacancyURL  InterviewScalarFieldEnum = "vacancyUrl"
	InterviewScalarFieldEnumMeetingURL  InterviewScalarFieldEnum = "meetingUrl"
	InterviewScalarFieldEnumIsCompleted InterviewScalarFieldEnum = "isCompleted"
	InterviewScalarFieldEnumUserID      InterviewScalarFieldEnum = "userId"
	InterviewScalarFieldEnumCreatedAt   InterviewScalarFieldEnum = "createdAt"
	InterviewScalarFieldEnumUpdatedAt   InterviewScalarFieldEnum = "updatedAt"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type NullsOrder string

const (
	NullsOrderFirst NullsOrder = "first"
	NullsOrderLast  NullsOrder = "last"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type interviewPrismaFields = prismaFields

const interviewFieldID interviewPrismaFields = "id"

const interviewFieldCompanyName interviewPrismaFields = "companyName"

const interviewFieldTime interviewPrismaFields = "time"

const interviewFieldNotes interviewPrismaFields = "notes"

const interviewFieldVacancyURL interviewPrismaFields = "vacancyUrl"

const interviewFieldMeetingURL interviewPrismaFields = "meetingUrl"

const interviewFieldIsCompleted interviewPrismaFields = "isCompleted"

const interviewFieldUserID interviewPrismaFields = "userId"

const interviewFieldCreatedAt interviewPrismaFields = "createdAt"

const interviewFieldUpdatedAt interviewPrismaFields = "updatedAt"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.Interview = interviewMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	Interview interviewMock
}

type interviewMock struct {
	mock *Mock
}

type InterviewMockExpectParam interface {
	ExtractQuery() builder.Query
	interviewModel()
}

func (m *interviewMock) Expect(query InterviewMockExpectParam) *interviewMockExec {
	return &interviewMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type interviewMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *interviewMockExec) Returns(v InterviewModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *interviewMockExec) ReturnsMany(v []InterviewModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *interviewMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// InterviewModel represents the Interview model and is a wrapper for accessing fields and methods
type InterviewModel struct {
	InnerInterview
	RelationsInterview
}

// InnerInterview holds the actual data
type InnerInterview struct {
	ID          string   `json:"id"`
	CompanyName string   `json:"companyName"`
	Time        DateTime `json:"time"`
	Notes       *string  `json:"notes,omitempty"`
	VacancyURL  *string  `json:"vacancyUrl,omitempty"`
	MeetingURL  *string  `json:"meetingUrl,omitempty"`
	IsCompleted bool     `json:"isCompleted"`
	UserID      string   `json:"userId"`
	CreatedAt   DateTime `json:"createdAt"`
	UpdatedAt   DateTime `json:"updatedAt"`
}

// RawInterviewModel is a struct for Interview when used in raw queries
type RawInterviewModel struct {
	ID          RawString   `json:"id"`
	CompanyName RawString   `json:"companyName"`
	Time        RawDateTime `json:"time"`
	Notes       *RawString  `json:"notes,omitempty"`
	VacancyURL  *RawString  `json:"vacancyUrl,omitempty"`
	MeetingURL  *RawString  `json:"meetingUrl,omitempty"`
	IsCompleted RawBoolean  `json:"isCompleted"`
	UserID      RawString   `json:"userId"`
	CreatedAt   RawDateTime `json:"createdAt"`
	UpdatedAt   RawDateTime `json:"updatedAt"`
}

// RelationsInterview holds the relation data separately
type RelationsInterview struct {
}

func (r InterviewModel) Notes() (value String, ok bool) {
	if r.InnerInterview.Notes == nil {
		return value, false
	}
	return *r.InnerInterview.Notes, true
}

func (r InterviewModel) VacancyURL() (value String, ok bool) {
	if r.InnerInterview.VacancyURL == nil {
		return value, false
	}
	return *r.InnerInterview.VacancyURL, true
}

func (r InterviewModel) MeetingURL() (value String, ok bool) {
	if r.InnerInterview.MeetingURL == nil {
		return value, false
	}
	return *r.InnerInterview.MeetingURL, true
}

// --- template query.gotpl ---

// Interview acts as a namespaces to access query methods for the Interview model
var Interview = interviewQuery{}

// interviewQuery exposes query functions for the interview model
type interviewQuery struct {

	// ID
	//
	// @required
	ID interviewQueryIDString

	// CompanyName
	//
	// @required
	CompanyName interviewQueryCompanyNameString

	// Time
	//
	// @required
	Time interviewQueryTimeDateTime

	// Notes
	//
	// @optional
	Notes interviewQueryNotesString

	// VacancyURL
	//
	// @optional
	VacancyURL interviewQueryVacancyURLString

	// MeetingURL
	//
	// @optional
	MeetingURL interviewQueryMeetingURLString

	// IsCompleted
	//
	// @required
	IsCompleted interviewQueryIsCompletedBoolean

	// UserID
	//
	// @required
	UserID interviewQueryUserIDString

	// CreatedAt
	//
	// @required
	CreatedAt interviewQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt interviewQueryUpdatedAtDateTime
}

func (interviewQuery) Not(params ...InterviewWhereParam) interviewDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return interviewDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (interviewQuery) Or(params ...InterviewWhereParam) interviewDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return interviewDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (interviewQuery) And(params ...InterviewWhereParam) interviewDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return interviewDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type interviewQueryIDString struct{}

// Set the required value of ID
func (r interviewQueryIDString) Set(value string) interviewSetParam {

	return interviewSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r interviewQueryIDString) SetIfPresent(value *String) interviewSetParam {
	if value == nil {
		return interviewSetParam{}
	}

	return r.Set(*value)
}

func (r interviewQueryIDString) Equals(value string) interviewWithPrismaIDEqualsUniqueParam {

	return interviewWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) EqualsIfPresent(value *string) interviewWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return interviewWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryIDString) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r interviewQueryIDString) Cursor(cursor string) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r interviewQueryIDString) In(value []string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) InIfPresent(value []string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.In(value)
}

func (r interviewQueryIDString) NotIn(value []string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) NotInIfPresent(value []string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.NotIn(value)
}

func (r interviewQueryIDString) Lt(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) LtIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.Lt(*value)
}

func (r interviewQueryIDString) Lte(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) LteIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.Lte(*value)
}

func (r interviewQueryIDString) Gt(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) GtIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.Gt(*value)
}

func (r interviewQueryIDString) Gte(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) GteIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.Gte(*value)
}

func (r interviewQueryIDString) Contains(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) ContainsIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.Contains(*value)
}

func (r interviewQueryIDString) StartsWith(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) StartsWithIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r interviewQueryIDString) EndsWith(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) EndsWithIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r interviewQueryIDString) Mode(value QueryMode) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) ModeIfPresent(value *QueryMode) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.Mode(*value)
}

func (r interviewQueryIDString) Not(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIDString) NotIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r interviewQueryIDString) HasPrefix(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r interviewQueryIDString) HasPrefixIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r interviewQueryIDString) HasSuffix(value string) interviewParamUnique {
	return interviewParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r interviewQueryIDString) HasSuffixIfPresent(value *string) interviewParamUnique {
	if value == nil {
		return interviewParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r interviewQueryIDString) Field() interviewPrismaFields {
	return interviewFieldID
}

// base struct
type interviewQueryCompanyNameString struct{}

// Set the required value of CompanyName
func (r interviewQueryCompanyNameString) Set(value string) interviewWithPrismaCompanyNameSetParam {

	return interviewWithPrismaCompanyNameSetParam{
		data: builder.Field{
			Name:  "companyName",
			Value: value,
		},
	}

}

// Set the optional value of CompanyName dynamically
func (r interviewQueryCompanyNameString) SetIfPresent(value *String) interviewWithPrismaCompanyNameSetParam {
	if value == nil {
		return interviewWithPrismaCompanyNameSetParam{}
	}

	return r.Set(*value)
}

func (r interviewQueryCompanyNameString) Equals(value string) interviewWithPrismaCompanyNameEqualsParam {

	return interviewWithPrismaCompanyNameEqualsParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) EqualsIfPresent(value *string) interviewWithPrismaCompanyNameEqualsParam {
	if value == nil {
		return interviewWithPrismaCompanyNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryCompanyNameString) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "companyName",
			Value: direction,
		},
	}
}

func (r interviewQueryCompanyNameString) Cursor(cursor string) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "companyName",
			Value: cursor,
		},
	}
}

func (r interviewQueryCompanyNameString) In(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) InIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.In(value)
}

func (r interviewQueryCompanyNameString) NotIn(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) NotInIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.NotIn(value)
}

func (r interviewQueryCompanyNameString) Lt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) LtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lt(*value)
}

func (r interviewQueryCompanyNameString) Lte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) LteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lte(*value)
}

func (r interviewQueryCompanyNameString) Gt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) GtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gt(*value)
}

func (r interviewQueryCompanyNameString) Gte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) GteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gte(*value)
}

func (r interviewQueryCompanyNameString) Contains(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) ContainsIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Contains(*value)
}

func (r interviewQueryCompanyNameString) StartsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) StartsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r interviewQueryCompanyNameString) EndsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) EndsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r interviewQueryCompanyNameString) Mode(value QueryMode) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) ModeIfPresent(value *QueryMode) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Mode(*value)
}

func (r interviewQueryCompanyNameString) Not(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCompanyNameString) NotIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r interviewQueryCompanyNameString) HasPrefix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r interviewQueryCompanyNameString) HasPrefixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r interviewQueryCompanyNameString) HasSuffix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "companyName",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r interviewQueryCompanyNameString) HasSuffixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r interviewQueryCompanyNameString) Field() interviewPrismaFields {
	return interviewFieldCompanyName
}

// base struct
type interviewQueryTimeDateTime struct{}

// Set the required value of Time
func (r interviewQueryTimeDateTime) Set(value DateTime) interviewWithPrismaTimeSetParam {

	return interviewWithPrismaTimeSetParam{
		data: builder.Field{
			Name:  "time",
			Value: value,
		},
	}

}

// Set the optional value of Time dynamically
func (r interviewQueryTimeDateTime) SetIfPresent(value *DateTime) interviewWithPrismaTimeSetParam {
	if value == nil {
		return interviewWithPrismaTimeSetParam{}
	}

	return r.Set(*value)
}

func (r interviewQueryTimeDateTime) Equals(value DateTime) interviewWithPrismaTimeEqualsParam {

	return interviewWithPrismaTimeEqualsParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryTimeDateTime) EqualsIfPresent(value *DateTime) interviewWithPrismaTimeEqualsParam {
	if value == nil {
		return interviewWithPrismaTimeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryTimeDateTime) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "time",
			Value: direction,
		},
	}
}

func (r interviewQueryTimeDateTime) Cursor(cursor DateTime) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "time",
			Value: cursor,
		},
	}
}

func (r interviewQueryTimeDateTime) In(value []DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryTimeDateTime) InIfPresent(value []DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.In(value)
}

func (r interviewQueryTimeDateTime) NotIn(value []DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryTimeDateTime) NotInIfPresent(value []DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.NotIn(value)
}

func (r interviewQueryTimeDateTime) Lt(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryTimeDateTime) LtIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lt(*value)
}

func (r interviewQueryTimeDateTime) Lte(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryTimeDateTime) LteIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lte(*value)
}

func (r interviewQueryTimeDateTime) Gt(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryTimeDateTime) GtIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gt(*value)
}

func (r interviewQueryTimeDateTime) Gte(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryTimeDateTime) GteIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gte(*value)
}

func (r interviewQueryTimeDateTime) Not(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryTimeDateTime) NotIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r interviewQueryTimeDateTime) Before(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r interviewQueryTimeDateTime) BeforeIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r interviewQueryTimeDateTime) After(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r interviewQueryTimeDateTime) AfterIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r interviewQueryTimeDateTime) BeforeEquals(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r interviewQueryTimeDateTime) BeforeEqualsIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r interviewQueryTimeDateTime) AfterEquals(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "time",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r interviewQueryTimeDateTime) AfterEqualsIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r interviewQueryTimeDateTime) Field() interviewPrismaFields {
	return interviewFieldTime
}

// base struct
type interviewQueryNotesString struct{}

// Set the optional value of Notes
func (r interviewQueryNotesString) Set(value string) interviewSetParam {

	return interviewSetParam{
		data: builder.Field{
			Name:  "notes",
			Value: value,
		},
	}

}

// Set the optional value of Notes dynamically
func (r interviewQueryNotesString) SetIfPresent(value *String) interviewSetParam {
	if value == nil {
		return interviewSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Notes dynamically
func (r interviewQueryNotesString) SetOptional(value *String) interviewSetParam {
	if value == nil {

		var v *string
		return interviewSetParam{
			data: builder.Field{
				Name:  "notes",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r interviewQueryNotesString) Equals(value string) interviewWithPrismaNotesEqualsParam {

	return interviewWithPrismaNotesEqualsParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) EqualsIfPresent(value *string) interviewWithPrismaNotesEqualsParam {
	if value == nil {
		return interviewWithPrismaNotesEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryNotesString) EqualsOptional(value *String) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) IsNull() interviewDefaultParam {
	var str *string = nil
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "notes",
			Value: direction,
		},
	}
}

func (r interviewQueryNotesString) Cursor(cursor string) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "notes",
			Value: cursor,
		},
	}
}

func (r interviewQueryNotesString) In(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) InIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.In(value)
}

func (r interviewQueryNotesString) NotIn(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) NotInIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.NotIn(value)
}

func (r interviewQueryNotesString) Lt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) LtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lt(*value)
}

func (r interviewQueryNotesString) Lte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) LteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lte(*value)
}

func (r interviewQueryNotesString) Gt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) GtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gt(*value)
}

func (r interviewQueryNotesString) Gte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) GteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gte(*value)
}

func (r interviewQueryNotesString) Contains(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) ContainsIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Contains(*value)
}

func (r interviewQueryNotesString) StartsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) StartsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r interviewQueryNotesString) EndsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) EndsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r interviewQueryNotesString) Mode(value QueryMode) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) ModeIfPresent(value *QueryMode) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Mode(*value)
}

func (r interviewQueryNotesString) Not(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryNotesString) NotIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r interviewQueryNotesString) HasPrefix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r interviewQueryNotesString) HasPrefixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r interviewQueryNotesString) HasSuffix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "notes",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r interviewQueryNotesString) HasSuffixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r interviewQueryNotesString) Field() interviewPrismaFields {
	return interviewFieldNotes
}

// base struct
type interviewQueryVacancyURLString struct{}

// Set the optional value of VacancyURL
func (r interviewQueryVacancyURLString) Set(value string) interviewSetParam {

	return interviewSetParam{
		data: builder.Field{
			Name:  "vacancyUrl",
			Value: value,
		},
	}

}

// Set the optional value of VacancyURL dynamically
func (r interviewQueryVacancyURLString) SetIfPresent(value *String) interviewSetParam {
	if value == nil {
		return interviewSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of VacancyURL dynamically
func (r interviewQueryVacancyURLString) SetOptional(value *String) interviewSetParam {
	if value == nil {

		var v *string
		return interviewSetParam{
			data: builder.Field{
				Name:  "vacancyUrl",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r interviewQueryVacancyURLString) Equals(value string) interviewWithPrismaVacancyURLEqualsParam {

	return interviewWithPrismaVacancyURLEqualsParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) EqualsIfPresent(value *string) interviewWithPrismaVacancyURLEqualsParam {
	if value == nil {
		return interviewWithPrismaVacancyURLEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryVacancyURLString) EqualsOptional(value *String) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) IsNull() interviewDefaultParam {
	var str *string = nil
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "vacancyUrl",
			Value: direction,
		},
	}
}

func (r interviewQueryVacancyURLString) Cursor(cursor string) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "vacancyUrl",
			Value: cursor,
		},
	}
}

func (r interviewQueryVacancyURLString) In(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) InIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.In(value)
}

func (r interviewQueryVacancyURLString) NotIn(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) NotInIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.NotIn(value)
}

func (r interviewQueryVacancyURLString) Lt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) LtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lt(*value)
}

func (r interviewQueryVacancyURLString) Lte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) LteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lte(*value)
}

func (r interviewQueryVacancyURLString) Gt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) GtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gt(*value)
}

func (r interviewQueryVacancyURLString) Gte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) GteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gte(*value)
}

func (r interviewQueryVacancyURLString) Contains(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) ContainsIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Contains(*value)
}

func (r interviewQueryVacancyURLString) StartsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) StartsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r interviewQueryVacancyURLString) EndsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) EndsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r interviewQueryVacancyURLString) Mode(value QueryMode) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) ModeIfPresent(value *QueryMode) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Mode(*value)
}

func (r interviewQueryVacancyURLString) Not(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryVacancyURLString) NotIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r interviewQueryVacancyURLString) HasPrefix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r interviewQueryVacancyURLString) HasPrefixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r interviewQueryVacancyURLString) HasSuffix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "vacancyUrl",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r interviewQueryVacancyURLString) HasSuffixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r interviewQueryVacancyURLString) Field() interviewPrismaFields {
	return interviewFieldVacancyURL
}

// base struct
type interviewQueryMeetingURLString struct{}

// Set the optional value of MeetingURL
func (r interviewQueryMeetingURLString) Set(value string) interviewSetParam {

	return interviewSetParam{
		data: builder.Field{
			Name:  "meetingUrl",
			Value: value,
		},
	}

}

// Set the optional value of MeetingURL dynamically
func (r interviewQueryMeetingURLString) SetIfPresent(value *String) interviewSetParam {
	if value == nil {
		return interviewSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of MeetingURL dynamically
func (r interviewQueryMeetingURLString) SetOptional(value *String) interviewSetParam {
	if value == nil {

		var v *string
		return interviewSetParam{
			data: builder.Field{
				Name:  "meetingUrl",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r interviewQueryMeetingURLString) Equals(value string) interviewWithPrismaMeetingURLEqualsParam {

	return interviewWithPrismaMeetingURLEqualsParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) EqualsIfPresent(value *string) interviewWithPrismaMeetingURLEqualsParam {
	if value == nil {
		return interviewWithPrismaMeetingURLEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryMeetingURLString) EqualsOptional(value *String) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) IsNull() interviewDefaultParam {
	var str *string = nil
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "meetingUrl",
			Value: direction,
		},
	}
}

func (r interviewQueryMeetingURLString) Cursor(cursor string) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "meetingUrl",
			Value: cursor,
		},
	}
}

func (r interviewQueryMeetingURLString) In(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) InIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.In(value)
}

func (r interviewQueryMeetingURLString) NotIn(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) NotInIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.NotIn(value)
}

func (r interviewQueryMeetingURLString) Lt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) LtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lt(*value)
}

func (r interviewQueryMeetingURLString) Lte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) LteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lte(*value)
}

func (r interviewQueryMeetingURLString) Gt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) GtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gt(*value)
}

func (r interviewQueryMeetingURLString) Gte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) GteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gte(*value)
}

func (r interviewQueryMeetingURLString) Contains(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) ContainsIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Contains(*value)
}

func (r interviewQueryMeetingURLString) StartsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) StartsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r interviewQueryMeetingURLString) EndsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) EndsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r interviewQueryMeetingURLString) Mode(value QueryMode) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) ModeIfPresent(value *QueryMode) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Mode(*value)
}

func (r interviewQueryMeetingURLString) Not(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryMeetingURLString) NotIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r interviewQueryMeetingURLString) HasPrefix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r interviewQueryMeetingURLString) HasPrefixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r interviewQueryMeetingURLString) HasSuffix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "meetingUrl",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r interviewQueryMeetingURLString) HasSuffixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r interviewQueryMeetingURLString) Field() interviewPrismaFields {
	return interviewFieldMeetingURL
}

// base struct
type interviewQueryIsCompletedBoolean struct{}

// Set the required value of IsCompleted
func (r interviewQueryIsCompletedBoolean) Set(value bool) interviewSetParam {

	return interviewSetParam{
		data: builder.Field{
			Name:  "isCompleted",
			Value: value,
		},
	}

}

// Set the optional value of IsCompleted dynamically
func (r interviewQueryIsCompletedBoolean) SetIfPresent(value *Boolean) interviewSetParam {
	if value == nil {
		return interviewSetParam{}
	}

	return r.Set(*value)
}

func (r interviewQueryIsCompletedBoolean) Equals(value bool) interviewWithPrismaIsCompletedEqualsParam {

	return interviewWithPrismaIsCompletedEqualsParam{
		data: builder.Field{
			Name: "isCompleted",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryIsCompletedBoolean) EqualsIfPresent(value *bool) interviewWithPrismaIsCompletedEqualsParam {
	if value == nil {
		return interviewWithPrismaIsCompletedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryIsCompletedBoolean) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "isCompleted",
			Value: direction,
		},
	}
}

func (r interviewQueryIsCompletedBoolean) Cursor(cursor bool) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "isCompleted",
			Value: cursor,
		},
	}
}

func (r interviewQueryIsCompletedBoolean) Field() interviewPrismaFields {
	return interviewFieldIsCompleted
}

// base struct
type interviewQueryUserIDString struct{}

// Set the required value of UserID
func (r interviewQueryUserIDString) Set(value string) interviewWithPrismaUserIDSetParam {

	return interviewWithPrismaUserIDSetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r interviewQueryUserIDString) SetIfPresent(value *String) interviewWithPrismaUserIDSetParam {
	if value == nil {
		return interviewWithPrismaUserIDSetParam{}
	}

	return r.Set(*value)
}

func (r interviewQueryUserIDString) Equals(value string) interviewWithPrismaUserIDEqualsParam {

	return interviewWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) EqualsIfPresent(value *string) interviewWithPrismaUserIDEqualsParam {
	if value == nil {
		return interviewWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryUserIDString) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r interviewQueryUserIDString) Cursor(cursor string) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r interviewQueryUserIDString) In(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) InIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.In(value)
}

func (r interviewQueryUserIDString) NotIn(value []string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) NotInIfPresent(value []string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.NotIn(value)
}

func (r interviewQueryUserIDString) Lt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) LtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lt(*value)
}

func (r interviewQueryUserIDString) Lte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) LteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lte(*value)
}

func (r interviewQueryUserIDString) Gt(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) GtIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gt(*value)
}

func (r interviewQueryUserIDString) Gte(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) GteIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gte(*value)
}

func (r interviewQueryUserIDString) Contains(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) ContainsIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Contains(*value)
}

func (r interviewQueryUserIDString) StartsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) StartsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r interviewQueryUserIDString) EndsWith(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) EndsWithIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r interviewQueryUserIDString) Mode(value QueryMode) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) ModeIfPresent(value *QueryMode) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Mode(*value)
}

func (r interviewQueryUserIDString) Not(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUserIDString) NotIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r interviewQueryUserIDString) HasPrefix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r interviewQueryUserIDString) HasPrefixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r interviewQueryUserIDString) HasSuffix(value string) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r interviewQueryUserIDString) HasSuffixIfPresent(value *string) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r interviewQueryUserIDString) Field() interviewPrismaFields {
	return interviewFieldUserID
}

// base struct
type interviewQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r interviewQueryCreatedAtDateTime) Set(value DateTime) interviewSetParam {

	return interviewSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r interviewQueryCreatedAtDateTime) SetIfPresent(value *DateTime) interviewSetParam {
	if value == nil {
		return interviewSetParam{}
	}

	return r.Set(*value)
}

func (r interviewQueryCreatedAtDateTime) Equals(value DateTime) interviewWithPrismaCreatedAtEqualsParam {

	return interviewWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) interviewWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return interviewWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryCreatedAtDateTime) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r interviewQueryCreatedAtDateTime) Cursor(cursor DateTime) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r interviewQueryCreatedAtDateTime) In(value []DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCreatedAtDateTime) InIfPresent(value []DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.In(value)
}

func (r interviewQueryCreatedAtDateTime) NotIn(value []DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.NotIn(value)
}

func (r interviewQueryCreatedAtDateTime) Lt(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCreatedAtDateTime) LtIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lt(*value)
}

func (r interviewQueryCreatedAtDateTime) Lte(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCreatedAtDateTime) LteIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lte(*value)
}

func (r interviewQueryCreatedAtDateTime) Gt(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCreatedAtDateTime) GtIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gt(*value)
}

func (r interviewQueryCreatedAtDateTime) Gte(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCreatedAtDateTime) GteIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gte(*value)
}

func (r interviewQueryCreatedAtDateTime) Not(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryCreatedAtDateTime) NotIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r interviewQueryCreatedAtDateTime) Before(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r interviewQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r interviewQueryCreatedAtDateTime) After(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r interviewQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r interviewQueryCreatedAtDateTime) BeforeEquals(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r interviewQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r interviewQueryCreatedAtDateTime) AfterEquals(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r interviewQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r interviewQueryCreatedAtDateTime) Field() interviewPrismaFields {
	return interviewFieldCreatedAt
}

// base struct
type interviewQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r interviewQueryUpdatedAtDateTime) Set(value DateTime) interviewSetParam {

	return interviewSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r interviewQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) interviewSetParam {
	if value == nil {
		return interviewSetParam{}
	}

	return r.Set(*value)
}

func (r interviewQueryUpdatedAtDateTime) Equals(value DateTime) interviewWithPrismaUpdatedAtEqualsParam {

	return interviewWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) interviewWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return interviewWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r interviewQueryUpdatedAtDateTime) Order(direction SortOrder) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) Cursor(cursor DateTime) interviewCursorParam {
	return interviewCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) In(value []DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) InIfPresent(value []DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.In(value)
}

func (r interviewQueryUpdatedAtDateTime) NotIn(value []DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.NotIn(value)
}

func (r interviewQueryUpdatedAtDateTime) Lt(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lt(*value)
}

func (r interviewQueryUpdatedAtDateTime) Lte(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Lte(*value)
}

func (r interviewQueryUpdatedAtDateTime) Gt(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gt(*value)
}

func (r interviewQueryUpdatedAtDateTime) Gte(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Gte(*value)
}

func (r interviewQueryUpdatedAtDateTime) Not(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r interviewQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r interviewQueryUpdatedAtDateTime) Before(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r interviewQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r interviewQueryUpdatedAtDateTime) After(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r interviewQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r interviewQueryUpdatedAtDateTime) BeforeEquals(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r interviewQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r interviewQueryUpdatedAtDateTime) AfterEquals(value DateTime) interviewDefaultParam {
	return interviewDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r interviewQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) interviewDefaultParam {
	if value == nil {
		return interviewDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r interviewQueryUpdatedAtDateTime) Field() interviewPrismaFields {
	return interviewFieldUpdatedAt
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type interviewActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var interviewOutput = []builder.Output{
	{Name: "id"},
	{Name: "companyName"},
	{Name: "time"},
	{Name: "notes"},
	{Name: "vacancyUrl"},
	{Name: "meetingUrl"},
	{Name: "isCompleted"},
	{Name: "userId"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type InterviewRelationWith interface {
	getQuery() builder.Query
	with()
	interviewRelation()
}

type InterviewWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
}

type interviewDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewDefaultParam) field() builder.Field {
	return p.data
}

func (p interviewDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p interviewDefaultParam) interviewModel() {}

type InterviewOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
}

type interviewOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewOrderByParam) field() builder.Field {
	return p.data
}

func (p interviewOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p interviewOrderByParam) interviewModel() {}

type InterviewCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	isCursor()
}

type interviewCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewCursorParam) field() builder.Field {
	return p.data
}

func (p interviewCursorParam) isCursor() {}

func (p interviewCursorParam) getQuery() builder.Query {
	return p.query
}

func (p interviewCursorParam) interviewModel() {}

type InterviewParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	interviewModel()
}

type interviewParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p interviewParamUnique) interviewModel() {}

func (interviewParamUnique) unique() {}

func (p interviewParamUnique) field() builder.Field {
	return p.data
}

func (p interviewParamUnique) getQuery() builder.Query {
	return p.query
}

type InterviewEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
}

type interviewEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewEqualsParam) interviewModel() {}

func (interviewEqualsParam) equals() {}

func (p interviewEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewEqualsParam) getQuery() builder.Query {
	return p.query
}

type InterviewEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	interviewModel()
}

type interviewEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewEqualsUniqueParam) interviewModel() {}

func (interviewEqualsUniqueParam) unique() {}
func (interviewEqualsUniqueParam) equals() {}

func (p interviewEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type InterviewSetParam interface {
	field() builder.Field
	settable()
	interviewModel()
}

type interviewSetParam struct {
	data builder.Field
}

func (interviewSetParam) settable() {}

func (p interviewSetParam) field() builder.Field {
	return p.data
}

func (p interviewSetParam) interviewModel() {}

type InterviewWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	idField()
}

type InterviewWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	idField()
}

type interviewWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaIDSetParam) interviewModel() {}

func (p interviewWithPrismaIDSetParam) idField() {}

type InterviewWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	idField()
}

type interviewWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaIDEqualsParam) interviewModel() {}

func (p interviewWithPrismaIDEqualsParam) idField() {}

func (interviewWithPrismaIDSetParam) settable()  {}
func (interviewWithPrismaIDEqualsParam) equals() {}

type interviewWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaIDEqualsUniqueParam) interviewModel() {}
func (p interviewWithPrismaIDEqualsUniqueParam) idField()        {}

func (interviewWithPrismaIDEqualsUniqueParam) unique() {}
func (interviewWithPrismaIDEqualsUniqueParam) equals() {}

type InterviewWithPrismaCompanyNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	companyNameField()
}

type InterviewWithPrismaCompanyNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	companyNameField()
}

type interviewWithPrismaCompanyNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaCompanyNameSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaCompanyNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaCompanyNameSetParam) interviewModel() {}

func (p interviewWithPrismaCompanyNameSetParam) companyNameField() {}

type InterviewWithPrismaCompanyNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	companyNameField()
}

type interviewWithPrismaCompanyNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaCompanyNameEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaCompanyNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaCompanyNameEqualsParam) interviewModel() {}

func (p interviewWithPrismaCompanyNameEqualsParam) companyNameField() {}

func (interviewWithPrismaCompanyNameSetParam) settable()  {}
func (interviewWithPrismaCompanyNameEqualsParam) equals() {}

type interviewWithPrismaCompanyNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaCompanyNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaCompanyNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaCompanyNameEqualsUniqueParam) interviewModel()   {}
func (p interviewWithPrismaCompanyNameEqualsUniqueParam) companyNameField() {}

func (interviewWithPrismaCompanyNameEqualsUniqueParam) unique() {}
func (interviewWithPrismaCompanyNameEqualsUniqueParam) equals() {}

type InterviewWithPrismaTimeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	timeField()
}

type InterviewWithPrismaTimeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	timeField()
}

type interviewWithPrismaTimeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaTimeSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaTimeSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaTimeSetParam) interviewModel() {}

func (p interviewWithPrismaTimeSetParam) timeField() {}

type InterviewWithPrismaTimeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	timeField()
}

type interviewWithPrismaTimeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaTimeEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaTimeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaTimeEqualsParam) interviewModel() {}

func (p interviewWithPrismaTimeEqualsParam) timeField() {}

func (interviewWithPrismaTimeSetParam) settable()  {}
func (interviewWithPrismaTimeEqualsParam) equals() {}

type interviewWithPrismaTimeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaTimeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaTimeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaTimeEqualsUniqueParam) interviewModel() {}
func (p interviewWithPrismaTimeEqualsUniqueParam) timeField()      {}

func (interviewWithPrismaTimeEqualsUniqueParam) unique() {}
func (interviewWithPrismaTimeEqualsUniqueParam) equals() {}

type InterviewWithPrismaNotesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	notesField()
}

type InterviewWithPrismaNotesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	notesField()
}

type interviewWithPrismaNotesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaNotesSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaNotesSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaNotesSetParam) interviewModel() {}

func (p interviewWithPrismaNotesSetParam) notesField() {}

type InterviewWithPrismaNotesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	notesField()
}

type interviewWithPrismaNotesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaNotesEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaNotesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaNotesEqualsParam) interviewModel() {}

func (p interviewWithPrismaNotesEqualsParam) notesField() {}

func (interviewWithPrismaNotesSetParam) settable()  {}
func (interviewWithPrismaNotesEqualsParam) equals() {}

type interviewWithPrismaNotesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaNotesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaNotesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaNotesEqualsUniqueParam) interviewModel() {}
func (p interviewWithPrismaNotesEqualsUniqueParam) notesField()     {}

func (interviewWithPrismaNotesEqualsUniqueParam) unique() {}
func (interviewWithPrismaNotesEqualsUniqueParam) equals() {}

type InterviewWithPrismaVacancyURLEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	vacancyURLField()
}

type InterviewWithPrismaVacancyURLSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	vacancyURLField()
}

type interviewWithPrismaVacancyURLSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaVacancyURLSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaVacancyURLSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaVacancyURLSetParam) interviewModel() {}

func (p interviewWithPrismaVacancyURLSetParam) vacancyURLField() {}

type InterviewWithPrismaVacancyURLWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	vacancyURLField()
}

type interviewWithPrismaVacancyURLEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaVacancyURLEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaVacancyURLEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaVacancyURLEqualsParam) interviewModel() {}

func (p interviewWithPrismaVacancyURLEqualsParam) vacancyURLField() {}

func (interviewWithPrismaVacancyURLSetParam) settable()  {}
func (interviewWithPrismaVacancyURLEqualsParam) equals() {}

type interviewWithPrismaVacancyURLEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaVacancyURLEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaVacancyURLEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaVacancyURLEqualsUniqueParam) interviewModel()  {}
func (p interviewWithPrismaVacancyURLEqualsUniqueParam) vacancyURLField() {}

func (interviewWithPrismaVacancyURLEqualsUniqueParam) unique() {}
func (interviewWithPrismaVacancyURLEqualsUniqueParam) equals() {}

type InterviewWithPrismaMeetingURLEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	meetingURLField()
}

type InterviewWithPrismaMeetingURLSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	meetingURLField()
}

type interviewWithPrismaMeetingURLSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaMeetingURLSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaMeetingURLSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaMeetingURLSetParam) interviewModel() {}

func (p interviewWithPrismaMeetingURLSetParam) meetingURLField() {}

type InterviewWithPrismaMeetingURLWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	meetingURLField()
}

type interviewWithPrismaMeetingURLEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaMeetingURLEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaMeetingURLEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaMeetingURLEqualsParam) interviewModel() {}

func (p interviewWithPrismaMeetingURLEqualsParam) meetingURLField() {}

func (interviewWithPrismaMeetingURLSetParam) settable()  {}
func (interviewWithPrismaMeetingURLEqualsParam) equals() {}

type interviewWithPrismaMeetingURLEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaMeetingURLEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaMeetingURLEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaMeetingURLEqualsUniqueParam) interviewModel()  {}
func (p interviewWithPrismaMeetingURLEqualsUniqueParam) meetingURLField() {}

func (interviewWithPrismaMeetingURLEqualsUniqueParam) unique() {}
func (interviewWithPrismaMeetingURLEqualsUniqueParam) equals() {}

type InterviewWithPrismaIsCompletedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	isCompletedField()
}

type InterviewWithPrismaIsCompletedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	isCompletedField()
}

type interviewWithPrismaIsCompletedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaIsCompletedSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaIsCompletedSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaIsCompletedSetParam) interviewModel() {}

func (p interviewWithPrismaIsCompletedSetParam) isCompletedField() {}

type InterviewWithPrismaIsCompletedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	isCompletedField()
}

type interviewWithPrismaIsCompletedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaIsCompletedEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaIsCompletedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaIsCompletedEqualsParam) interviewModel() {}

func (p interviewWithPrismaIsCompletedEqualsParam) isCompletedField() {}

func (interviewWithPrismaIsCompletedSetParam) settable()  {}
func (interviewWithPrismaIsCompletedEqualsParam) equals() {}

type interviewWithPrismaIsCompletedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaIsCompletedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaIsCompletedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaIsCompletedEqualsUniqueParam) interviewModel()   {}
func (p interviewWithPrismaIsCompletedEqualsUniqueParam) isCompletedField() {}

func (interviewWithPrismaIsCompletedEqualsUniqueParam) unique() {}
func (interviewWithPrismaIsCompletedEqualsUniqueParam) equals() {}

type InterviewWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	userIDField()
}

type InterviewWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	userIDField()
}

type interviewWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaUserIDSetParam) interviewModel() {}

func (p interviewWithPrismaUserIDSetParam) userIDField() {}

type InterviewWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	userIDField()
}

type interviewWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaUserIDEqualsParam) interviewModel() {}

func (p interviewWithPrismaUserIDEqualsParam) userIDField() {}

func (interviewWithPrismaUserIDSetParam) settable()  {}
func (interviewWithPrismaUserIDEqualsParam) equals() {}

type interviewWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaUserIDEqualsUniqueParam) interviewModel() {}
func (p interviewWithPrismaUserIDEqualsUniqueParam) userIDField()    {}

func (interviewWithPrismaUserIDEqualsUniqueParam) unique() {}
func (interviewWithPrismaUserIDEqualsUniqueParam) equals() {}

type InterviewWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	createdAtField()
}

type InterviewWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	createdAtField()
}

type interviewWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaCreatedAtSetParam) interviewModel() {}

func (p interviewWithPrismaCreatedAtSetParam) createdAtField() {}

type InterviewWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	createdAtField()
}

type interviewWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaCreatedAtEqualsParam) interviewModel() {}

func (p interviewWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (interviewWithPrismaCreatedAtSetParam) settable()  {}
func (interviewWithPrismaCreatedAtEqualsParam) equals() {}

type interviewWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaCreatedAtEqualsUniqueParam) interviewModel() {}
func (p interviewWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (interviewWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (interviewWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type InterviewWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	interviewModel()
	updatedAtField()
}

type InterviewWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	updatedAtField()
}

type interviewWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaUpdatedAtSetParam) interviewModel() {}

func (p interviewWithPrismaUpdatedAtSetParam) updatedAtField() {}

type InterviewWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	interviewModel()
	updatedAtField()
}

type interviewWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaUpdatedAtEqualsParam) interviewModel() {}

func (p interviewWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (interviewWithPrismaUpdatedAtSetParam) settable()  {}
func (interviewWithPrismaUpdatedAtEqualsParam) equals() {}

type interviewWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p interviewWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p interviewWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p interviewWithPrismaUpdatedAtEqualsUniqueParam) interviewModel() {}
func (p interviewWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (interviewWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (interviewWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single interview.
func (r interviewActions) CreateOne(
	_companyName InterviewWithPrismaCompanyNameSetParam,
	_time InterviewWithPrismaTimeSetParam,
	_userID InterviewWithPrismaUserIDSetParam,

	optional ...InterviewSetParam,
) interviewCreateOne {
	var v interviewCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Interview"
	v.query.Outputs = interviewOutput

	var fields []builder.Field

	fields = append(fields, _companyName.field())
	fields = append(fields, _time.field())
	fields = append(fields, _userID.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r interviewCreateOne) With(params ...InterviewRelationWith) interviewCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type interviewCreateOne struct {
	query builder.Query
}

func (p interviewCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p interviewCreateOne) interviewModel() {}

func (r interviewCreateOne) Exec(ctx context.Context) (*InterviewModel, error) {
	var v InterviewModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r interviewCreateOne) Tx() InterviewUniqueTxResult {
	v := newInterviewUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type interviewFindUnique struct {
	query builder.Query
}

func (r interviewFindUnique) getQuery() builder.Query {
	return r.query
}

func (r interviewFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r interviewFindUnique) with()              {}
func (r interviewFindUnique) interviewModel()    {}
func (r interviewFindUnique) interviewRelation() {}

func (r interviewActions) FindUnique(
	params InterviewEqualsUniqueWhereParam,
) interviewFindUnique {
	var v interviewFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Interview"
	v.query.Outputs = interviewOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r interviewFindUnique) With(params ...InterviewRelationWith) interviewFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r interviewFindUnique) Select(params ...interviewPrismaFields) interviewFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r interviewFindUnique) Omit(params ...interviewPrismaFields) interviewFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range interviewOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r interviewFindUnique) Exec(ctx context.Context) (
	*InterviewModel,
	error,
) {
	var v *InterviewModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r interviewFindUnique) ExecInner(ctx context.Context) (
	*InnerInterview,
	error,
) {
	var v *InnerInterview
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r interviewFindUnique) Update(params ...InterviewSetParam) interviewUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Interview"

	var v interviewUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type interviewUpdateUnique struct {
	query builder.Query
}

func (r interviewUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r interviewUpdateUnique) interviewModel() {}

func (r interviewUpdateUnique) Exec(ctx context.Context) (*InterviewModel, error) {
	var v InterviewModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r interviewUpdateUnique) Tx() InterviewUniqueTxResult {
	v := newInterviewUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r interviewFindUnique) Delete() interviewDeleteUnique {
	var v interviewDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Interview"

	return v
}

type interviewDeleteUnique struct {
	query builder.Query
}

func (r interviewDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p interviewDeleteUnique) interviewModel() {}

func (r interviewDeleteUnique) Exec(ctx context.Context) (*InterviewModel, error) {
	var v InterviewModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r interviewDeleteUnique) Tx() InterviewUniqueTxResult {
	v := newInterviewUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type interviewFindFirst struct {
	query builder.Query
}

func (r interviewFindFirst) getQuery() builder.Query {
	return r.query
}

func (r interviewFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r interviewFindFirst) with()              {}
func (r interviewFindFirst) interviewModel()    {}
func (r interviewFindFirst) interviewRelation() {}

func (r interviewActions) FindFirst(
	params ...InterviewWhereParam,
) interviewFindFirst {
	var v interviewFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Interview"
	v.query.Outputs = interviewOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r interviewFindFirst) With(params ...InterviewRelationWith) interviewFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r interviewFindFirst) Select(params ...interviewPrismaFields) interviewFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r interviewFindFirst) Omit(params ...interviewPrismaFields) interviewFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range interviewOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r interviewFindFirst) OrderBy(params ...InterviewOrderByParam) interviewFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r interviewFindFirst) Skip(count int) interviewFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r interviewFindFirst) Take(count int) interviewFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r interviewFindFirst) Cursor(cursor InterviewCursorParam) interviewFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r interviewFindFirst) Exec(ctx context.Context) (
	*InterviewModel,
	error,
) {
	var v *InterviewModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r interviewFindFirst) ExecInner(ctx context.Context) (
	*InnerInterview,
	error,
) {
	var v *InnerInterview
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type interviewFindMany struct {
	query builder.Query
}

func (r interviewFindMany) getQuery() builder.Query {
	return r.query
}

func (r interviewFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r interviewFindMany) with()              {}
func (r interviewFindMany) interviewModel()    {}
func (r interviewFindMany) interviewRelation() {}

func (r interviewActions) FindMany(
	params ...InterviewWhereParam,
) interviewFindMany {
	var v interviewFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Interview"
	v.query.Outputs = interviewOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r interviewFindMany) With(params ...InterviewRelationWith) interviewFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r interviewFindMany) Select(params ...interviewPrismaFields) interviewFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r interviewFindMany) Omit(params ...interviewPrismaFields) interviewFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range interviewOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r interviewFindMany) OrderBy(params ...InterviewOrderByParam) interviewFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r interviewFindMany) Skip(count int) interviewFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r interviewFindMany) Take(count int) interviewFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r interviewFindMany) Cursor(cursor InterviewCursorParam) interviewFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r interviewFindMany) Exec(ctx context.Context) (
	[]InterviewModel,
	error,
) {
	var v []InterviewModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r interviewFindMany) ExecInner(ctx context.Context) (
	[]InnerInterview,
	error,
) {
	var v []InnerInterview
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r interviewFindMany) Update(params ...InterviewSetParam) interviewUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Interview"

	r.query.Outputs = countOutput

	var v interviewUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type interviewUpdateMany struct {
	query builder.Query
}

func (r interviewUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r interviewUpdateMany) interviewModel() {}

func (r interviewUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r interviewUpdateMany) Tx() InterviewManyTxResult {
	v := newInterviewManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r interviewFindMany) Delete() interviewDeleteMany {
	var v interviewDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Interview"

	v.query.Outputs = countOutput

	return v
}

type interviewDeleteMany struct {
	query builder.Query
}

func (r interviewDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p interviewDeleteMany) interviewModel() {}

func (r interviewDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r interviewDeleteMany) Tx() InterviewManyTxResult {
	v := newInterviewManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newInterviewUniqueTxResult() InterviewUniqueTxResult {
	return InterviewUniqueTxResult{
		result: &transaction.Result{},
	}
}

type InterviewUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p InterviewUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p InterviewUniqueTxResult) IsTx() {}

func (r InterviewUniqueTxResult) Result() (v *InterviewModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newInterviewManyTxResult() InterviewManyTxResult {
	return InterviewManyTxResult{
		result: &transaction.Result{},
	}
}

type InterviewManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p InterviewManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p InterviewManyTxResult) IsTx() {}

func (r InterviewManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type interviewUpsertOne struct {
	query builder.Query
}

func (r interviewUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r interviewUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r interviewUpsertOne) with()              {}
func (r interviewUpsertOne) interviewModel()    {}
func (r interviewUpsertOne) interviewRelation() {}

func (r interviewActions) UpsertOne(
	params InterviewEqualsUniqueWhereParam,
) interviewUpsertOne {
	var v interviewUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Interview"
	v.query.Outputs = interviewOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r interviewUpsertOne) Create(

	_companyName InterviewWithPrismaCompanyNameSetParam,
	_time InterviewWithPrismaTimeSetParam,
	_userID InterviewWithPrismaUserIDSetParam,

	optional ...InterviewSetParam,
) interviewUpsertOne {
	var v interviewUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _companyName.field())
	fields = append(fields, _time.field())
	fields = append(fields, _userID.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r interviewUpsertOne) Update(
	params ...InterviewSetParam,
) interviewUpsertOne {
	var v interviewUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r interviewUpsertOne) CreateOrUpdate(

	_companyName InterviewWithPrismaCompanyNameSetParam,
	_time InterviewWithPrismaTimeSetParam,
	_userID InterviewWithPrismaUserIDSetParam,

	optional ...InterviewSetParam,
) interviewUpsertOne {
	var v interviewUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _companyName.field())
	fields = append(fields, _time.field())
	fields = append(fields, _userID.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r interviewUpsertOne) Exec(ctx context.Context) (*InterviewModel, error) {
	var v InterviewModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r interviewUpsertOne) Tx() InterviewUniqueTxResult {
	v := newInterviewUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template raw.gotpl ---

type interviewAggregateRaw struct {
	query builder.Query
}

func (r interviewAggregateRaw) getQuery() builder.Query {
	return r.query
}

func (r interviewAggregateRaw) ExtractQuery() builder.Query {
	return r.query
}

func (r interviewAggregateRaw) with()              {}
func (r interviewAggregateRaw) interviewModel()    {}
func (r interviewAggregateRaw) interviewRelation() {}

func (r interviewActions) FindRaw(filter interface{}, options ...interface{}) interviewAggregateRaw {
	var v interviewAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "findRaw"
	v.query.Operation = "query"
	v.query.Model = "Interview"

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "filter",
		Value: fmt.Sprintf("%v", filter),
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r interviewActions) AggregateRaw(pipeline []interface{}, options ...interface{}) interviewAggregateRaw {
	var v interviewAggregateRaw
	v.query = builder.NewQuery()
	v.query.Engine = r.client
	v.query.Method = "aggregateRaw"
	v.query.Operation = "query"
	v.query.Model = "Interview"

	parsedPip := []interface{}{}
	for _, p := range pipeline {
		parsedPip = append(parsedPip, fmt.Sprintf("%v", p))
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:  "pipeline",
		Value: parsedPip,
	})

	if len(options) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:  "options",
			Value: fmt.Sprintf("%v", options[0]),
		})
	}
	return v
}

func (r interviewAggregateRaw) Exec(ctx context.Context) ([]InterviewModel, error) {
	var v []InterviewModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

func (r interviewAggregateRaw) ExecInner(ctx context.Context) ([]InnerInterview, error) {
	var v []InnerInterview
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}
